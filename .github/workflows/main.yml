name: 'Flutter CI'
on:
  push:
    branches:
      - main
      - beta
      - alpha

jobs:

  set-package-and-version:
    runs-on: ubuntu-latest
    outputs:
      package-name: ${{steps.get_package.outputs.pkg_name}}
      app-version: ${{steps.get_version.outputs.version_number}}

    steps:
      - name: 'Clone repository'
        uses: actions/checkout@v3
      
      - name: 'Get Package Name'
        id: get_package
        run: |
          OLD_PACKAGE_NAME=$(grep -o 'package="[^"]*"' flutter_app/android/app/src/main/AndroidManifest.xml | cut -d '"' -f 2)
          echo "pkg_name=OLD_PACKAGE_NAME" >> $GITHUB_OUTPUT
      
      - name: 'Read Version'
        id: get_version
        run: |
          OLD_VERSION=$(yq -r '.version' 'flutter_app/pubspec.yaml')
          echo "version_number=OLD_VERSION" >> $GITHUB_OUTPUT

  build-android:
    runs-on: ubuntu-latest
    needs: set-package-and-version

    steps:
      - name: 'Clone repository'
        uses: actions/checkout@v3
      
      # - name: 'list tree'
      #   run: |
      #     tree 
      #     echo "------------------"

      
      # - name: 'Set up Flutter'
      #   uses: subosito/flutter-action@v2
      #   with:
        #     channel: stable
        #     flutter-version-file: flutter_app/pubspec.yaml 
      - run: cd 'flutter_app'
        
      - name: Echo output
        run: |
          echo "== output =="
          echo "${{needs.set-package-and-version.outputs.package-name}}"
          echo "${{needs.set-package-and-version.outputs.app-version}}"
      # - run: cd 'flutter_app'
      # - run: cd flutter_app && flutter pub get
      # - run: cd flutter_app && flutter build apk --split-per-abi
      # - run: ls flutter_app/build/app/outputs/apk/release/*.apk

      # - name: Get version
      #   id: yq
      #   uses: mikefarah/yq@master
      #   with:
      #     cmd: yq -r '.version' 'flutter_app/pubspec.yaml'

      # - name: Print version
      #   run: echo "v${{ steps.yq.outputs.result }}"

      # - name: "Push to releases"
      #   uses: ncipollo/release-action@v1
      #   with: 
      #     artifacts: flutter_app/build/app/outputs/apk/release/*.apk
      #     tag: "v${{ steps.yq.outputs.result }}"
      #     token: ${{ secrets.RELEASE_TOKEN }}
          
  # build_ios: 
  #   runs-on: macos-latest
  #   permissions:
  #     contents: read 
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: 'Set up Xcode'
  #       uses: actions/checkout@v3 
  #       with:
  #         repository: 'apple/developer-tools'
  #         path: '/usr/local/tools'
  #         ref: 'main'

  #     - name: 'Install Dependencies (iOS)'
  #       run: cd expense_tracker && flutter pub get

  #     - name: 'Build iOS App'
  #       run: cd expense_tracker && flutter build ios 

  #     - name: "Upload iOS Artifact (Optional)"
  #       uses: actions/upload-artifact@v3 
  #       with:
  #         name: ios-app 
  #         path: expense_tracker/build/ios/archive 